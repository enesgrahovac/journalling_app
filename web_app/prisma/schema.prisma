datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String         @id @default(uuid())
  email     String?        @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  entries   JournalEntry[]
  media     Media[]
  convos    Conversation[]
}

model JournalEntry {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  title     String?
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  media     Media[]
}

model Media {
  id             String        @id @default(uuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  journalEntryId String?
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])
  url            String
  mimeType       String
  sizeBytes      Int
  createdAt      DateTime      @default(now())
  ocrResults     OcrResult[]
}

model OcrResult {
  id         String   @id @default(uuid())
  mediaId    String
  media      Media    @relation(fields: [mediaId], references: [id])
  rawText    String
  confidence Float?
  model      String
  tokens     Int?
  createdAt  DateTime @default(now())
}

model Conversation {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  messages  Message[]
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  role           MessageRole
  content        String
  createdAt      DateTime     @default(now())
}

enum MessageRole {
  user
  assistant
  system
}
